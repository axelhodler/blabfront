"use strict";function NavbarController(e){this.userLoggedIn=function(){return e.userLoggedIn()},this.loggedInUserFullname=function(){return e.loggedInUserFullName()}}function BlabController(e){var t=this;t.text=[],e.getAll().then(function(e){t.text=e.data})}function LedgerDetailController(e,t,o,n){var r=this;r.ethereumAddress=e.id,r.data={},o.getOneById(r.ethereumAddress).then(function(e){r.data=e.data}),r.createTransaction=function(){o.createTransaction(r.ethereumAddress,r.amountToSend).then(function(){t.path("/ledger")})},r.isAllowedToExchangeChosenAmount=function(){return r.data.tokenAmount>=r.amountToExchange},r.exchangeToEuro=function(){n.toEuro(r.amountToExchange,r.ethereumAddress),r.data.tokenAmount-=r.amountToExchange}}function ExchangeService(e,t){this.toEuro=function(o,n){return e.post(t+"/exchange",{amount:o,recipient:n})}}function LoginController(e){this.login=function(){e.login(this.username,this.password)}}function LogoutButton(e){return{templateUrl:"src/session/directives/templates/logout_button.html",link:function(t){t.logout=function(){e.logout()}}}}function Login(e,t,o){this.login=function(n,r){o.login(n,r).then(function(o){t.store(o.data),e.path("/ledger")})}}function LogoutService(e,t){this.logout=function(){t.deleteToken(),e.path("/")}}function SessionService(e){this.userLoggedIn=function(){return!!e.getDecodedToken()},this.loggedInUserFullName=function(){return e.getDecodedToken().fullName}}angular.module("blab",["ngRoute","angular-jwt"]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"src/session/templates/login_form",controller:"LoginController",controllerAs:"login"}).when("/ledger",{templateUrl:"src/ledger/templates/overview",controller:"BlabController",controllerAs:"overview"}).when("/ledger/:id",{templateUrl:"src/ledger/templates/detail",controller:"LedgerDetailController",controllerAs:"detail"})}]).config(["$httpProvider",function(e){e.interceptors.push("authInterceptor")}]).constant("REST_API_URL","http://gkapi.hodler.co:3000"),angular.module("blab").config(["$compileProvider",function(e){e.debugInfoEnabled(!1)}]),angular.module("blab").controller("NavbarController",NavbarController),NavbarController.$inject=["SessionService"],angular.module("blab").controller("BlabController",BlabController),BlabController.$inject=["Ledgers"],angular.module("blab").controller("LedgerDetailController",LedgerDetailController),LedgerDetailController.$inject=["$routeParams","$location","Ledgers","ExchangeService"],angular.module("blab").service("ExchangeService",ExchangeService),ExchangeService.$inject=["$http","REST_API_URL"],function(){function e(e,t){this.getAll=function(){return e.get(t+"/ledgers")},this.getOneById=function(o){return e.get(t+"/ledgers/"+o)},this.createTransaction=function(o,n){return e.post(t+"/transactions",{to:o,amount:n})}}angular.module("blab").service("Ledgers",e),e.$inject=["$http","REST_API_URL"]}(),angular.module("blab").controller("LoginController",LoginController),LoginController.$inject=["Login"],angular.module("blab").directive("blabLogoutButton",LogoutButton),LogoutButton.$inject=["LogoutService"],function(){angular.module("blab").factory("authInterceptor",["TokenRepository",function(e){return{request:function(t){t.headers=t.headers||{};var o=e.fetchToken();return o&&(t.headers.Authorization=o),t}}}])}(),function(){function e(e,t){this.login=function(o,n){return e.post(t+"/auth",{email:o,password:n})}}angular.module("blab").service("Authentication",e),e.$inject=["$http","REST_API_URL"]}(),angular.module("blab").service("Login",Login),Login.$inject=["$location","TokenRepository","Authentication"],angular.module("blab").service("LogoutService",LogoutService),LogoutService.$inject=["$location","TokenRepository"],angular.module("blab").service("SessionService",SessionService),SessionService.$inject=["TokenRepository"],function(){function e(e,t){this.store=function(t){e.sessionStorage.token=t},this.deleteToken=function(){delete e.sessionStorage.token},this.fetchToken=function(){return e.sessionStorage.token},this.getDecodedToken=function(){var e=this.fetchToken();if(e)return t.decodeToken(this.fetchToken())}}angular.module("blab").service("TokenRepository",e),e.$inject=["$window","jwtHelper"]}();
